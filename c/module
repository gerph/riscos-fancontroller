/*******************************************************************
 * File:        main
 * Purpose:     FanController module interface
 * Author:      Gerph
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "kernel.h"

#include "modhead.h"
#include "commands.h"


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw)
{
    printf("Module FanController initialised\n");
    return NULL;
}


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw)
{
    printf("Module FanController dying\n");
    return NULL;
}


/***************************************************************************
 * Description:  Star command and help request handler routines.
 * Parameters:   arg_string = pointer to argument string (control
 *                            terminated), or output buffer
 *               argc       = number of arguments passed
 *               number     = command number (see CMD_* definitions below)
 *               pw         = private word for module
 * On exit:      If number indicates a help entry:
 *                 To output, assemble zero terminated output into
 *                 arg_string, and return help_PRINT_BUFFER to print it.
 *                 To stay silent, return NULL.
 *                 To given an error, return an error pointer.
 *                 [In this case, you need to cast the 'const' away]
 *               If number indicates a configure option:
 *                 If arg_string is arg_STATUS, then print status, otherwise
 *                 use argc and arg_string to set option.
 *                 Return NULL for no error.
 *                 Return one of the four error codes below (configure_*)
 *                 for a generic error message.
 *                 Return an error pointer for a custom error.
 *               If number indicates a command entry:
 *                 Execute the command given by number, and arg_string.
 *                 Return NULL on success,
 *                 Return a pointer to an error block on failure.
 **************************************************************************/
_kernel_oserror *Mod_Command(const char *arg_string, int argc, int number,
                             void *pw)
{
    if (number == CMD_FansInfo)
        return Cmd_FansInfo();
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Version(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Enumerate(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Info(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Speed(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Configure(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Register(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}

/*************************************************** Gerph *********
 Function:      SWI_Version
 Description:   Return version number of the API we conform to
 Parameters:    number = SWI number
                r -> registers block on entry for update
                pw -> module private word
 Returns:       pointer to an error block if failed
                NULL if successful
 ******************************************************************/
_kernel_oserror *SWI_Deregister(int number, _kernel_swi_regs *r, void *pw)
{
    /* FIXME: Not implemented */
    return NULL;
}
