/*******************************************************************
 * File:        fan
 * Purpose:     Management of a single fan and its interfaces
 * Author:      Gerph
 ******************************************************************/

#include <stdlib.h>
#include <string.h>

#include "callx.h"
#include "fortify.h"

#include "FanController.h"
#include "fan.h"
#include "str.h"


/*************************************************** Gerph *********
 Function:      fan_create
 Description:   Create a reference to a fan
 Parameters:    location_id = location of the fan
                capabilities = capabilities flags
                provider -> provider name (will be copied)
                accuracy = accuracy of the fan speed
                speeds -> list of supported speeds
                maximum = maximum speed
                driver_code -> the code to call for the driver
                driver_ws -> r12 value for the driver
 Returns:       pointer to the fan_t, or NULL if failed
 ******************************************************************/
fan_t *fan_create(unsigned long   location_id,
                  unsigned long   capabilities,
                  const char *    provider,
                  unsigned long   accuracy,
                  unsigned long * speeds,
                  unsigned long   maximum,
                  void *          driver_code,
                  void *          driver_ws)
{
    fan_t *fan;

    fan = calloc(1, sizeof(*fan));
    if (fan == NULL)
        goto failed;

    fan->provider = strdup(provider);
    if (fan->provider == NULL)
        goto failed;

    fan->fan_id = -1;
    fan->location_id = location_id;
    fan->capabilities = capabilities;
    fan->accuracy = accuracy;
    if (fan->speeds)
    {
        int nspeeds;
        for (nspeeds = 0; speeds[nspeeds] != -1; nspeeds++)
            ; /* We're just counting, so this is all in the list */
        fan->speeds = malloc(sizeof(unsigned long) * (nspeeds + 1));
        if (fan->speeds == NULL)
            goto failed;

        memcpy(fan->speeds, speeds, sizeof(unsigned long) * (nspeeds + 1));
    }
    fan->maximum = maximum;
    fan->control_mode = FanControl_Error; /* Marker that we haven't read it yet */

    fan->driver_code = driver_code;
    fan->driver_ws = driver_ws;

    return fan;

failed:
    if (fan)
    {
        if (fan->provider)
            free(fan->provider);
        if (fan->speeds)
            free(fan->speeds);
        free(fan);
    }
    return NULL;
}

/*************************************************** Gerph *********
 Function:      fan_destroy
 Description:   Destroy the fan
 Parameters:    fan-> the fan we're destroying (assumed to already have
                      been unlinked).
 Returns:       none
 ******************************************************************/
void fan_destroy(fan_t *fan)
{
    if (fan->provider)
        free(fan->provider);
    if (fan->speeds)
        free(fan->speeds);
    free(fan);
}


/*************************************************** Gerph *********
 Function:      fan_getspeed
 Description:   Read the speed from the Fan
 Parameters:    fan -> the fan we're operating on
 Returns:       fan speed or state
 ******************************************************************/
int fan_getspeed(fan_t *fan)
{
    _kernel_oserror *err;
    int speed;

    err = _callx(fan->driver_code, fan->driver_ws,
                 _INR(0, 2)|_OUT(3),
                 FanDriver_GetSpeed, fan->fan_id, fan->location_id,
                 &speed);
    if (err)
    {
        return FanState_Disconnected;
    }
    return speed;
}


/*************************************************** Gerph *********
 Function:      fan_setspeed
 Description:   Set the speed of the Fan
 Parameters:    fan -> the fan we're operating on
                speed = speed to set
 Returns:       fan speed or state selected
 ******************************************************************/
int fan_setspeed(fan_t *fan, int speed)
{
    _kernel_oserror *err;

    /* If there is a maximum speed, check the supplied speed isn't greater than it */
    if (fan->maximum)
    {
        if (speed > fan->maximum)
            return FanState_Disconnected;
    }

    /* If there is an accuracy, check that they supplied the speed to that accuracy */
    if (fan->accuracy)
    {
        if (speed % fan->accuracy)
            return FanState_Disconnected;
    }

    /* If there are only certain speeds supported, check against them */
    if (fan->speeds)
    {
        unsigned long *speed_ptr = fan->speeds;
        int found = 0;
        for (speed_ptr = fan->speeds; *speed_ptr != -1; speed_ptr++)
        {
            if (*speed_ptr == speed)
            {
                found = 1;
                break;
            }
        }
        // FIXME: Decide if it'd be better to round to the closest?
        if (!found)
            return FanState_Disconnected;
    }

    err = _callx(fan->driver_code, fan->driver_ws,
                 _INR(0, 3)|_OUT(3),
                 FanDriver_SetSpeed, fan->fan_id, fan->location_id, speed,
                 &speed);
    if (err)
    {
        return FanState_Disconnected;
    }
    return speed;
}


/*************************************************** Gerph *********
 Function:      fan_getcontrol
 Description:   Read the control mode of the fan
 Parameters:    fan -> the fan we're operating on
 Returns:       fan control mode
 ******************************************************************/
fancontrolmode_t fan_getcontrol(fan_t *fan)
{
    _kernel_oserror *err;
    fancontrolmode_t  mode;

    if (fan->control_mode != FanControl_Error)
    {
        /* We know the mode it's in, so we can return it */
        return fan->control_mode;
    }

    if (! (fan->capabilities & FanCapability_SupportsAutomatic))
    {
        // If it does not support automatic control, then it's manual only
        mode = FanControl_Manual;
    }
    else
    {
        err = _callx(fan->driver_code, fan->driver_ws,
                     _INR(0, 2)|_OUT(3),
                     FanDriver_GetControlMode, fan->fan_id, fan->location_id,
                     &mode);
        if (err)
            mode = FanControl_Error;
        fan->control_mode = mode;
    }
    return mode;
}


/*************************************************** Gerph *********
 Function:      fan_setcontrol
 Description:   Set the control mode of the fan
 Parameters:    fan -> the fan we're operating on
                mode = the control mode to use
 Returns:       fan control mode
 ******************************************************************/
fancontrolmode_t fan_setcontrol(fan_t *fan, fancontrolmode_t mode)
{
    _kernel_oserror *err;
    fancontrolmode_t request;
    fancontrolmode_t current;

    if (mode == FanControl_Manual ||
        mode == FanControl_Managed)
    {
        if (! (fan->capabilities & FanCapability_SupportsManual))
        {
            /* They wanted manual, but manual isn't supported, so error */
            return FanControl_Error;
        }
    }
    else if (mode == FanControl_AutomaticPerformance ||
             mode == FanControl_AutomaticNoise)
    {
        if (! (fan->capabilities & FanCapability_SupportsAutomatic))
        {
            /* They wanted one of the automatic, but auto isn't supported, so error */
            return FanControl_Error;
        }
    }
    else
    {
        /* That's not a valid control state */
        return FanControl_Error;
    }

    request = mode;
    if (mode == FanControl_Managed)
    {
        /* Managed is largely informational for interfaces; the driver only sees 'manual' */
        request = FanControl_Manual;
    }
    current = fan->control_mode;
    if (current == FanControl_Managed)
    {
        /* If we know we're in managed mode, then that's the same as manual */
        current = FanControl_Manual;
    }

    /* Only call the driver if we're changing mode */
    if (request != current)
    {
        err = _callx(fan->driver_code, fan->driver_ws,
                     _INR(0, 3)|_OUT(3),
                     FanDriver_SetControlMode, fan->fan_id, fan->location_id, mode,
                     &current);
        if (err)
        {
            return FanControl_Error;
        }
    }
    else
    {
        /* If the driver is in the same state, then the current mode is the request */
        current = request;
    }

    if (mode == FanControl_Managed && current == FanControl_Manual)
    {
        /* Change to managed so that we keep it as managed */
        current = FanControl_Managed;
    }
    fan->control_mode = current;

    return current;
}


/*************************************************** Gerph *********
 Function:      fan_setlocation
 Description:   Set the location of the fan
 Parameters:    fan -> the fan we're operating on
                location_id = the location id to select
 Returns:       fan control mode
 ******************************************************************/
fansetlocation_result_t fan_setlocation(fan_t *fan, unsigned long location_id)
{
    _kernel_oserror *err;
    /* FIXME: Validate if the can location can be set */
    int result;

    err = _callx(fan->driver_code, fan->driver_ws,
                 _INR(0, 3)|_OUT(3),
                 FanDriver_SetControlMode, fan->fan_id, fan->location_id, location_id,
                 &result);
    if (err || result != FanSetLocation_OK)
    {
        return FanSetLocation_Invalid;
    }

    return FanSetLocation_OK;
}


/*************************************************** Gerph *********
 Function:      fan_announce
 Description:   Announce the arrival, or leaving, of a fan
 Parameters:    fan-> the fan to announce
                started = 1 if started; 0 if dying
 Returns:       none
 ******************************************************************/
void fan_announce(fan_t *fan, int started)
{
    _swix(OS_ServiceCall, _INR(0, 2),
                          fan->fan_id,
                          Service_FanControllerFanChanged,
                          started ? Service_FanControllerFanChanged_Added
                                  : Service_FanControllerFanChanged_Removed);
}
