/*******************************************************************
 * File:        fan
 * Purpose:     Fan interfacing
 * Author:      Gerph
 ******************************************************************/

#ifndef FAN_H
#define FAN_H

#include "FanController.h"

/* Information about the fan */
typedef struct fan_s {
    int fan_id;

    /* Registration parameters */
    unsigned long location_id;
    unsigned long capabilities;
    int accuracy;
    int maximum;
    int *speeds;

    /* Runtime parameters */
    /* (actually these don't need to be here if you always query the physical hardware) */
    int speed;
    fancontrolmode_t control_mode;

    /* Add additional hardware specific details here */
} fan_t;



/*************************************************** Gerph *********
 Function:      fan_open
 Description:   Open the connection to a fan
                If we were successful, fan_alive will return true.
                If we're not, we won't get registered.
 Parameters:    fan -> the fan data
 Returns:       none
 ******************************************************************/
void fan_open(fan_t *fan);


/*************************************************** Gerph *********
 Function:      fan_close
 Description:   Close the connection to a fan
                From here on, fan_alive will report false.
 Parameters:    fan -> the fan data
 Returns:       none
 ******************************************************************/
void fan_close(fan_t *fan);


/*************************************************** Gerph *********
 Function:      fan_alive
 Description:   Check if this fan structure is alive
 Parameters:    fan -> the fan data
 Returns:       1 if the fan is connected and alive,
                0 if the fan is either not connected, or we are
                    unable to communicate with it
 ******************************************************************/
int fan_alive(fan_t *fan);


/*************************************************** Gerph *********
 Function:      fan_getspeed
 Description:   Read the current speed
 Parameters:    fan -> the fan data
 Returns:       current speed
 ******************************************************************/
int fan_getspeed(fan_t *fan);

/*************************************************** Gerph *********
 Function:      fan_setspeed
 Description:   Set the speed for the fan
 Parameters:    fan -> the fan data
                speed = new speed to select
 Returns:       current speed
 ******************************************************************/
int fan_setspeed(fan_t *fan, int speed);

/*************************************************** Gerph *********
 Function:      fan_getcontrolmode
 Description:   Read the control mode
 Parameters:    fan -> the fan data
 Returns:       current speed
 ******************************************************************/
fancontrolmode_t fan_getcontrolmode(fan_t *fan);

/*************************************************** Gerph *********
 Function:      fan_setcontrolmode
 Description:   Set the control mode
 Parameters:    fan -> the fan data
                mode = control mode to select
 Returns:       control mode
 ******************************************************************/
fancontrolmode_t fan_setcontrolmode(fan_t *fan, fancontrolmode_t mode);

/*************************************************** Gerph *********
 Function:      fan_setlocation
 Description:   Change the location of the fan
 Parameters:    fan -> the fan data
                new_location_id = location
 Returns:       0 if ok, -1 if invalid
 ******************************************************************/
fansetlocation_result_t fan_setlocation(fan_t *fan, unsigned long new_location_id);

#endif
